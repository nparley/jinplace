
= Events =
'''New in v1.1'''

Events are sent from the edited element to indicate the success or
otherwise of the operation.
You can bind an event handler to be notified when one of these events
occurs.

== General example ==
Here is a quick example of how to bind the event that is sent after a
successful edit.
This is just standard use of the jquery .on() method, so see the
jquery documentation for more information.

<pre code=javascript>
// Bind to the 'jinplace:done' event on all editable elements and
// print a message.  Of course you can bind to individual elements
// as you require.
$('.editable').jinplace()
	.on('jinplace:done', function(ev, data) {
		console.log('Successful edit! New value is', data);
	});
</pre>

== Available events ==
=== Event jinplace:done ===
This event is fired after a submit is successfully completed.
It occurs after the submit operation and before the edit field is
taken down and the original text returned.
<pre code=javascript>
element.on('jinplace:done',
	// ev: The event object itself
	// data: The new text for the element
	// textStatus: Text from the http reply.
	// jqxhr: the jquery version of the XmlHttpRequest object
	function(ev, data, textStatus, jqxhr) {
	}
);
</pre>
Your handler function is given the returned data as its first
argument.
There are probably not many uses for the other arguments. The
textStatus value is most likely blank.

If a custom 'submitFunction' is defined then the arguments (if any)
are entirely determined by that function.

=== Event jinplace:fail ===
This event is fired after a submit fails.
It occurs after the submit operation and before the edit field
is taken down.

There will never be both a jinplace:done and a jinplace:fail for the
same submit operation.
<pre code=javascript>
element.on('jinplace:fail',
	// ev: The event object itself
	// jqxhr: the jquery version of the XmlHttpRequest object
	// textStatus: Text status: "error", "timeout" etc
	// errorThrown: The text in the error reply
	function(ev, jqxhr, textStatus, errorThrown) {
	}
</pre>
The first argument is the jquery version of the XmlHttpRequest object,
the second arg will be 'error', 'timeout', 'parsererror', 'abort' and
the final errorThrown argument is the text part of the http reply such
as 'Not Found' 'Internal Server Error' etc. Together you may be
able to use this to work out what has gone wrong and the likelyhood
of the user being able to correct the problem.
Mostly just knowing that the operation failed is all you will need.

If a custom 'submitFunction' is defined then that function
determines what arguments your handler is called with.

=== Event jinplace:always ===
This event is fired after the editing operation, no matter if it
succeeds or fails.
The callback functions are called after any success or fail callback
functions have been run.

The arguments that the handler function receives are the same
ones that the appropriate success or fail handler receives.

If a custom 'submitFunction' is defined then this event will still
always be called, but the arguments that the callback functions are
supplied with will depend on the submitFunction.
